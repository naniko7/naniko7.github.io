[{"title":"try tag_plugins&assets","url":"/2022/05/18/try-tag-plugins-assets/","content":"_.compactUnderscore.js_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);=&gt; [1, 2, 3]\n\n\n\nimport base64import torchimport numpy a = numpy.array(5)\n\n\n\n\n\n\n\n\n"},{"title":"采用hexo和github搭建个人博客","url":"/2022/05/19/%E9%87%87%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","content":"参考资料：\n使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)\n1. Hexo安装\n安装Node.js与git\n\n前往官网下载即可，无脑一直continue\n\ncmd打开命令工具，查看安装是否成功\nnode -vnpm -vgit --version \n\n\n安装Hexo\n\n执行安装命令： npm install -g hexo-cli\n\n进入自己想要书写博客的文件夹，此处建立在F盘下的“myblog”文件夹下\nhexo init      # 初始化npm install    # 安装组件hexo g   # 生成页面hexo s   # 启动预览\n\n执行完成访问http://localhost:4000，可以看到自己的博客\n\n\n\n\n2. Github配置\n使用git连接github\n\n在git bash中设置用户名和邮箱，设置完成后会在.ssh下出现.gitconfig文件\ngit config --global user.name &quot;GitHub 用户名&quot;git config --global user.email &quot;GitHub 邮箱&quot;\n\n\n新建github仓库\n\n仓库名称为：用户名.github.io\n设置为public\n\n\n配置hexo的配置文件\n\n编辑“myblog&#x2F;_config.yml”文件，修改文件末尾的deploy为如下设置。\n\n这里采用http连接，不采用ssh连接，因此无需配置ssh。repo后的连接就是http方式，这里填写自己的仓库链接就好。\n\nbranch网络上都给出的是master，但是这里自己实践如果推送到master会显示不了，仓库默认是main，因此这里把branch改成了main，后续也将会把内容都推送到main中。之后就可以正常显示了。\ndeploy:  type: git  repo: https://github.com/naniko7/naniko7.github.io.git  branch: main\n\n\n\n3. hexo主题配置3.1 hexo文件夹说明\n初始化后的部分文件说明\n_config.yml：网站的配置信息\npackage.json：应用程序的信息。比如一些依赖项的版本\nscaffolds ：模板文件夹\nsource：资源文件夹。\n用于存放用户资源，除了_posts文件夹之外，开头命名为  _ 的文件夹或文件以及隐藏文件 将被忽略。\nMarkdown和HTML文件将被解析并放到public文件夹，其他文件会被拷贝过去。\n\n\nthemes：主题文件夹\nHexo会根据主题来生成静态页面\n\n\n\n\n\n:star:一些杂记\n_config.yml\n\n_config.yml使用的是yaml语法，同时也支持json格式，但是json格式相较于yaml更为复杂。\n在模板中如“- - -”的符号改为“; ; ;”就能支持json\n\nlayout\n\n默认有三种布局：post, draft, page。其中draft不会被显示在网页上。\n\n创建新文章的命令为：\nhexo new post “new blog”，这里创建的就是post布局\n如果创建了草稿，并且需要迁移到post中，则需要：\nhexo new draft “new blog”\nhexo publish draft “new blog”\n\n\nScaffold\n\n默认布局是三种，可以自己新建布局，存放scaffolds文件夹中。\n默认的scaffolds中就存放了draft, page, post三个布局的md文件。\n\nFront-matter\n\ncategories参数：分类具有顺序性和层次性\ntags参数：标签没有顺序和层次\ncomment参数：是否开启评论\n\n永久链接\n\n如果需要考虑使用恒定id，确保评论与文章不会映射混乱，可以使用插件hexo-abbrlink。\n\n3.2 hexo主题使用个人使用主题：Keep 配置指南 | hexo-theme-keep (xpoet.cn)\n3.3 hexo命令\nhexo new ： hexo new [layout]   title\n用途：创建不同布局的博客\n可用参数\n-p：定义新文章路径（文件夹位置，非url）\n-r ：存在同名文章时替换\n-s：文章的slug\n\n\n\n\nhexo generate:  简化形式“hexo g”\nhexo publish\nhexo server\nhexo deploy: 简化形式为“hexo d”\nhexo render\nhexo migrate\nhexo clean\n\n3.4 实用操作1. 插入图片\n参考资料： Hexo官网“标签插件—–Embed image”\n\n配置.config.yml以下参数\npost_asset_folder: truemarked:  prependRoot: true  postAsset: true\n\n\n\n两种插入方式\n\n使用标签插件\n说明：使用标签插件是指使用\n&#123;% asset_img img_path img_dis %&#125;\n\n\n\n图片放置位置： 将“post_asset_floder”参数设为true后，会自动生成一个同名的文件夹，将图片放在该文件夹下即可。\n\n直接嵌入\n说明：使用markdown的一般语法，e.g\n![ ]()\n\n\n\n图片放置位置： 将“post_asset_floder”参数设为true后，会自动生成一个同名的文件夹，将图片放在该文件夹下即可。\n\n\n\n\n4. SVG图标一些精彩的动画：30个很棒的SVG动画 - SegmentFault 思否\n图标获取网站：\n\nVector Icons and Stickers - PNG, SVG, EPS, PSD and CSS (flaticon.com)\nAnimate Your Own Icon into GIF &#x2F; loading.io\niconfont-阿里巴巴矢量图标库\n\n","categories":["hexo"],"tags":["hexo","github pages"]},{"title":"ssh-github连接","url":"/2022/05/19/ssh-github%E8%BF%9E%E6%8E%A5/","content":"SSH连接GitHub问题说明：尝试使用hexo和GitHub搭建个人博客时，不少教程介绍使用时，需要创建SSH公匙用于与GitHub连接，几次尝试连接GitHub均失败。本篇博客用于记录尝试过程。\n目的：使用SSH连接Github\n参考资料（利用Hexo搭建博客，但是按照步骤来在ssh连接时遇到了困难）：超详细 Hexo + Github Pages 博客搭建教程 - 知乎 (zhihu.com)\n前置：\n\n已完成用户名、邮箱配置，并生成了ssh密钥文件。且在GitHub-settings-keys页面中，创建了新的SSH Key，完成了id_rsa.pub的内容复制。\n完成了Node.js，git的安装\n\n报错信息：\n在执行下方命令时，出现报错。\n\n$ ssh -T git@github.comssh: connect to host ssh.github.com port 22: Connection timed out\n\n尝试解决方法：\n在.ssh文件夹下新建config文件，添加如下信息。\nHost github.comUser gitHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443\n\n效果：\n\n无用，端口443依然连接超时。\n\n在“C盘&#x2F;用户&#x2F;用户名”文件夹下生成了.gitconfig文件，其中记录了已经和git绑定的GitHub账号，内容为：\n[user]\tname = naniko7\temail = 937489834@qq.com[color]\tui = auto\n\n\n放弃ssh，使用http进行连接，不再使用ssh连接。\n\n\n​       配置代理的端口，此处不要设置为1080，看看自己的vpn的端口号是什么，如clash的端口号为7890，则将端口设为7890。之后就能通过http的方式进行git clone等操作。\n参考资料：【经验宝宝】Failed to connect to github.com port 443: Operation timed out - 烟霞志 (simplestark.com)\ngit config --global http.proxy http://127.0.0.1:7890 git config --global https.proxy http://127.0.0.1:7890\n\n\n可以看到http方式已经可以正常clone，但是ssh依然不行。\n","categories":["hexo","other"]},{"title":"chap1 c++ primer","url":"/2022/05/29/chap1-c-primer/","content":"C++的特点：\n\n继承了C语言的高效、简洁、快速和可移植性的传统。\n面向对象编程（OOP）\nC++的模板特性提供了另一种全新的编程方法：泛型编程\n\n1. C++简史1.1 一些词汇和基本知识结构化编程时代：C 、Pascal\nOPP: C++ 、SmallTalk\n操作系统：管理计算机资源、处理计算机与用户之间交互的一组程序。\n【Note1】\n需求：为此需要一种语言能够生成程序并有效地控制硬件。\n【Note2】\n难点：汇编语言迁移性差。\n\n传统上使用汇编语言满足操作系统的相应操作。\n汇编语言：低级语言，直接操作硬件，如直接访问CPU寄存器和内存单元。\n汇编语言针对特定的计算机处理器，迁移性差。\n\n\n\n【Note3】：\n解决方案：编译器 + 高级语言\n\n编译器作用：将高级语言翻译成特定计算机的内部语言。\n\n1.2 面向过程与面向对象程序 &#x3D; 数据 + 算法\nC语言（强调算法）\n\n过程性语言：过程化编程首先要确定计算机应采取的操作，然后使用编程语言来实现这些操作。即先固定流程，根据流程得到结果。\n结构化编程：例如采用for循环、while循环结构来将指令限制为行为良好的结构，避免执行路径混乱。\n自顶向下（top-down）的设计：将大型程序分解为小型、便于管理的任务。使用函数来表示各个任务模块。\n\n结构化编程技术反应了过程性编程思想，根据执行的操作来构思程序。\nC++语言（强调数据）\n\nOPP：试图让语言满足问题的要求。其理念是设计与问题的本质特性相对应的数据格式。\n类与对象\n类表示程序需要处理的东西，定义好可执行的操作。\n\n\n泛型编程\n使重用代码和抽象通用概念的技术更加简单。\n强调独立于特定数据类型，可以编写一个不是特定类型的函数。\n\n\n\n优点：可以方便地重用和修改现有的、经过仔细测试的代码。\nC给了C++联系硬件的能力，OPP给了C++高级抽象的能力。\n1.3 编程步骤\n源代码\n编译器编译得到目标代码\n链接程序（链接目标代码、启动代码与库代码）\n可执行代码\n\n源代码\n\n常见的扩展名：C、cc、cxx、c++、cpp\n\n编译器\n\n编译器、编辑器与IDE之间的区分\n\n","categories":["C++"],"tags":["C++"]},{"title":"chap2 c++ primer","url":"/2022/05/29/chap2-c-primer/","content":"最重要的部分为每章后的总结，需要仔细查阅\n1. C++程序各部分说明\n注释： &#x2F;&#x2F;\n\n#include ：预处理器编译指令，用于包含头文件\n\n#include &lt;iostream&gt;\n// 该行预处理器编译指令等同于：将iostream文件的内容取代程序中的代码行#include &lt;iostream&gt;。原文件并没有被修改，而是将源代码文件与iostream文件组合成一个复合文件\n\n\n程序编译时自动执行\n\n头文件：每个头文件支持一组工具，被包含在其他文件中，也可以称为包含文件\n\n以.h结尾：C++与C的旧式风格，C与C++均可以使用\n没有扩展名：C++可以使用\n以c开头：转换后的C，可以使用一些不是C的特性，如namespace\n\n\n\n\nint main( )：函数头\n\n接口：这里可以理解为操作系统与之的接口\n\n\nusing namespace：编译指令\n\nusing：编译指令\nusing namespace std;// 该编译命令使得std名称空间中的所有名称都可以用//如果不想包含所有的代码，只想用某个函数，只需要编译特定的需要的对象就好//例如只需要使用cout对象，仅编译cout即可using std::cout// 采用以上方式后，\n\n\n\nnamespace\n\n\n\n\n1.1 main函数函数 &#x3D; 函数头 + 函数体\nint main()&#123;    cout &lt;&lt; &quot;this is a sentence&quot;;    cin.get();    cin.get();    return 0;&#125;\n\n1.1.1 函数头函数头 &#x3D; 接口\nint main()\n\n\nint：函数返回类型。描述的是从函数返回给调用它的函数的信息。\nmain：函数名\n()：这里面可以填写参数，称作形参列表或参数列表（argument list或parameter list）\n\n函数头的书写注意事项：\n\n指定函数返回类型（如int，此后函数体内需要包含return 0语句），可以使用void类型，但是有些系统上不能工作，最好不用。\n传入的参数可以指定为void，表示无需传入参数\n\n1.1.2 函数体&#123;    cout &lt;&lt; &quot;this is a sentence&quot;;    cin.get();    cin.get();    return 0;&#125;\n\n\n语句以分号结束，不可省略\n结束函数\n\n1.1.3 main()函数要求\n必须有main()函数，动态链接库（DLL）除外。\n如果编译器到达main()函数末尾没有返回语句，默认以return 0 语句结尾。但是这种隐含的返回语句只适用于main()函数\n\n1.2 名称空间\n头文件（包含文件）：支持一组特定的工具\n\n在C语言中，头文件使用扩展名h（C++中还可以用这种文件）\nC++头文件没有扩展名，没有h的头文件也可以包含名称空间\n\n\n名称空间\n\n组织程序，防止同名的函数使用混乱（类似于事先分配好地方，每个函数在自己的地方活动）\n\n以iostream为例\n\n偷懒做法\nusing namespace std;\n\n用什么写什么\nusing std::cout;\n\n此后无需使用std::cout，只需要使用cout\n\n\n\n\n\n\n1.3 重载运算符等\n什么叫重载运算符？\n通过重载，同一个运算符将有不同的含义。\n例如，&amp;既可以表示地址运算符，又能表示AND运算符\n\n\n控制符、换行符等\n控制符：例如endl（需要引入iostream，直接使用需要引入名称空间std）\n换行符\n\n\n\n1.4 使用Vscode书写C++程序\n根据报错信息下载对应的插件\n一些符号说明\n控制符”endl”\n用处：重启一行\n\n\n换行符“\\n”\n用处：换行\n是一种转义序列\n\n\n\n\n\n2. C++语句常见的语句类型：\n\n声明语句（定义声明）\n赋值语句\n\n2.1 语句声明语句\nint carrots;\n\n以上语句声明了一个类型为int的名为carrots的变量。\n\n声明语句的作用：分配内存与确定类型。\nC++中所有的变量都必须声明，避免在不知情情况下创建一个新的变量。\n在首次使用变量之前声明即可，无需在最开始声明全部变量。\n\n赋值语句\ncarrots = 25;//将25赋值给carrots变量int rabbits, apples;rabbits = apples = carrots;//C++允许连续使用赋值运算符，赋值从右到左进行int a = 33;//c++允许在创建变量时就对他赋值\n\n2.2 函数\nC++的函数分为两种：有返回值的和没有返回值的。\n\n几个概念：\n\n\n\n调用函数\n\n最外层的接口函数\n\n\n函数调用\n\n被调用的函数\n\n\n\nC++程序应当为程序中使用的每个函数提供原型。函数原型之于函数就像变量声明之于变量，即指出涉及的类型，在使用某个函数前，必须提供原型。\n\n\n函数原型怎么提供？\n\n方法一：在源代码文件中输入函数原型。 \n方法二：包含定义了原型的头文件。\n\n\n原型只描述了函数的接口，定义的时发送给函数的信息和返回的信息，不包含函数实现的代码。\n\n推荐写法：\n\n在开头提供自定义函数原型\n\n书写main函数\n\n书写其他自定义的函数\n#include &lt;iostream&gt;using namespace std;//函数原型int addfunction(int,int);//书写main函数int main()&#123;    int a = 2;    int b = 3;    int c;    c = addfunction(a,b);    return 0;&#125;//定义addfunctionint addfunction(int a,int b)&#123;    int c;    c = a + b ;    return c;&#125;\n\n\n\n疑问记录及回答\n如何理解using namespace std？ 这里的std可以自定义名称吗？ std指向的代码部分是那些？ 哪些函数可用，如何查看？\n答：\n\nusing namespace std是编译指令，指向std名称空间中的代码。\nstd是专用的名称，目前尚不清楚这个命名机制，但是尝试改为using namespace ss后程序不可执行\n\n\n\n计算机对数据的存储。例如int a &#x3D; 25;对于变量a来说，在计算机中是如何存储的？\n答：\n\nchar类型可以存储什么？\n\n\n总结\nC与C++的异同。\n【Notes】\n\nC使用printf函数时需要指定打印类型，而C++中使用cout函数可以自主判断变量的类型选择输出。其逻辑为：\n\n\nC++的特性。\n\n名称空间支持：编写大型程序或组合现有代码时更为容易。将某部分代码封装在一个叫做名称空间的单元中，这样就可以指定该部分代码属于什么来源。\n\n\n\n\n","categories":["c++"],"tags":["c++ primer"]}]